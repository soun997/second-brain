{
	"nodes":[
		{"id":"b208de5316d8d68d","type":"text","text":"#### 1. 순차적 실행으로 인한 오버헤드\n\n프로세스를 쪼개어 **별도로 실행**한다면?","x":80,"y":-216,"width":369,"height":113},
		{"id":"6fd26403e5da9414","type":"text","text":"#### 2. 시스템 호출이 포함된 프로세스의 지나친 대기시간\n\n프로세스 코드를 분할해, 각각을 **별도의 단위로 관리**\n(수행, 블록, 준비...)한다면?","x":80,"y":-76,"width":548,"height":113},
		{"id":"6cead457b09557bd","type":"text","text":"#### 3. 하나의 프로세스는 하나의 처리기(코어)에서만 동작\n\n**큰 프로세스를 분할**해 여러 처리기에서 나누어 **병렬적으로 처리**한다면?","x":80,"y":80,"width":566,"height":100},
		{"id":"ced2877806e8e5db","type":"text","text":"#### 4. 동일 프로세스 이미지 복수개가 주기억장치에 생성\n\n하나의 프로세스 **이미지를 공유**해서 **복수개를 실행**한다면?","x":80,"y":220,"width":548,"height":113},
		{"id":"c069bd626799e572","type":"text","text":"# 4. 쓰레드","x":-480,"y":-329,"width":250,"height":60,"color":"6"},
		{"id":"202f02e46d6b7648","type":"text","text":"### 프로세스 단위 관리의 문제점","x":-480,"y":-189,"width":352,"height":60},
		{"id":"a96907c45ccafcce","type":"text","text":"### 해결책: 쓰레드","x":880,"y":-189,"width":217,"height":60},
		{"id":"f4fc7f7afe220a2e","type":"text","text":"#### 단일쓰레딩\n\n하나의 프로세스에 하나의 제어흐름","x":1204,"y":-189,"width":381,"height":113},
		{"id":"b57d6c17d2da5aed","type":"text","text":"#### 멀티쓰레딩\n\n하나의 프로세스에 여러 개의 제어흐름","x":1204,"y":17,"width":381,"height":113},
		{"id":"211ae4dedb7b1cca","type":"file","file":"images/프로세스 이미지.png","x":80,"y":362,"width":158,"height":247},
		{"id":"996ddae1662a75ff","type":"text","text":"#### 쓰레드의 상태 전이\n\n1. **생성**\n\t1. 프로세스 생성 시, 내부에 정의된 모든 쓰레드들도 함께 생성\n\t2. 쓰레드가 새로운 쓰레드 생성 가능\n\t\t1. 새로운 스레드 -> 준비큐로\n2. **블록**\n\t1. 사건을 기다림\n3. **비블록**\n\t1. 사건이 발생되면 준비큐로\n4. **종료**\n\t1. 작업완료 -> 레지스터 문맥, 스택 해제","x":80,"y":1116,"width":403,"height":384},
		{"id":"3e858a34563d51ef","type":"text","text":"#### 쓰레드\n\n**쓰레드 제어 블록 (TCB)**\n- 실행상태(수행, 준비, 블록, 우선순위 정보\n- PC Register, Stack Pointer\n\n**실행스택**\n- 독립적인 함수 호출 가능\n\n**정적 저장소**\n- 지역변수 저장","x":1440,"y":251,"width":400,"height":354,"color":"1"},
		{"id":"8b2578a285f72c5d","type":"text","text":"#### 태스크\n\n프로세스 이미지(코드, 전역 변수)을 유지하는 가상 주소 공간\n","x":921,"y":251,"width":400,"height":142},
		{"id":"84fb9dd0339d18e1","type":"text","text":"### 다중쓰레드와 운영체제\n\n**단기 스케줄링(디스패칭)은 쓰레드를 기초로 함**\n- 수행 관련된 정보 -> 쓰레드 제어 블록(TCB)\n\n**프로세스 수준에서의 관리**\n- 보류(suspend) 상태는 프로세스 단위로 처리\n- 하나의 프로세스가 종료되면 하위 쓰레드들도 종료","x":720,"y":1007,"width":460,"height":273,"color":"1"},
		{"id":"b510183af1351434","type":"text","text":"### 쓰레드의 수행 상태\n\n1. 수행\n3. 준비\n4. 블록","x":654,"y":1358,"width":296,"height":160},
		{"id":"4ebd3f6a4a6509de","type":"text","text":"### 쓰레드의 유형\n\n쓰레드의 구현 수준","x":1900,"y":697,"width":240,"height":100},
		{"id":"34ccbfdb675ae9f4","type":"text","text":"### 커널 수준 쓰레드(KLT)\n\n- 커널은 쓰레드 단위로 단기스케줄링 실시","x":2260,"y":975,"width":411,"height":100,"color":"1"},
		{"id":"42b7a908726cb295","type":"text","text":"#### 단점\n\n1. **블록 상태를 유발하는 시스템 호출 시 전체 블록**\n\t1. 프로세스 자체가 블록 -> 쓰레드들도 블록\n\t2. 대안: **자켓팅(Jacketing) 기술**\n\t\t2. non-blocking system call\n\t\t3. 응용 수준의 입출력용 자켓 루틴 호출\n2. **다중처리기의 장점을 살리지 못함**\n\t1. 커널 루틴 자체는 다중쓰레딩 불가\n\t2. 대안: 응용을 멀티 프로세스로 작성\n\t\t1. 쓰레드 교환이 아닌 프로세스를 교환\n","x":2900,"y":639,"width":431,"height":329},
		{"id":"2fb68d265a3f3e40","type":"text","text":"#### 장점\n\n1. 쓰레드 교환/교체 시에 커널 모드 권한 불필요\n\t1. 모드 전이 오버헤드 절약\n2. 운영체제 스케줄러와 무관\n\t1. 특정 응용에 적합한 스케줄링\n3. 커널과 무관\n\t1. 모든 OS에서 수행 가능\n","x":2900,"y":352,"width":417,"height":250},
		{"id":"8548178216408cca","type":"text","text":"#### 장점\n\n1. 여러 쓰레드들을 다중처리기에서 수행 가능\n2. 쓰레드가 블록되어도 다른 쓰레드들은 동작\n3. 커널 루틴 자체도 멀티 쓰레딩 가능","x":2900,"y":1000,"width":439,"height":151},
		{"id":"492ad7a7cdfee0d8","type":"text","text":"#### 단점\n\n1. 쓰레드 전환 시 커널 모드로의 전환에 의한 오버헤드","x":2900,"y":1193,"width":439,"height":115},
		{"id":"229e91180feb205a","type":"text","text":"### ULT + KLT\n\n대부분의 쓰레드 생성, 동기화 및 스케줄링은 사**용자 공간에서 실행**\nULT들은 같거나 적은 수의 KLT와 결합","x":2258,"y":1168,"width":436,"height":144},
		{"id":"7b06668eacf5578a","type":"text","text":"### 사용자 수준 쓰레드(ULT)\n\n- 커널은 프로세스 단위로 스케줄링\n- 쓰레드 라이브러리가 프로세스 내의 쓰레드를 스케줄링\n- POSIX Pthreads, Windows, JAVA","x":2260,"y":697,"width":431,"height":176,"color":"1"},
		{"id":"c7cd21413ac26326","type":"text","text":"#### 쓰레드 프로그래밍 기법\n\n**Thread Library 이용**\n- 프로그래머가 API를 이용해 직접 작성\n- Pthreads, Java threads, Windows threads\n\n**암묵적 쓰레딩**\n- 컴파일러에게 쓰레드 관련 일을 전담\n\n","x":2380,"y":281,"width":384,"height":295},
		{"id":"9e058fe010ccb494","type":"text","text":"#### Thread Pool 기술\n\n여러 개의 쓰레드를 미리 만들어놓고, 요청이 들어오면 하나씩 할당\n- Thread 생성 소멸의 오버헤드 제거\n\n","x":2594,"y":0,"width":340,"height":165},
		{"id":"9a1152b2705936a4","type":"text","text":"### 쓰레드 동기화\n\n한 프로세스 내의 모든 쓰레드들은 동일 주소 공간 및 자원들을 공유\n- 공유자원에 동시 접근(쓰기) 시, 일관성 유지 기법 필요","x":1494,"y":953,"width":406,"height":198},
		{"id":"0730acccaaa7b59a","type":"text","text":"#### 멀티코어 상에서의 소프트웨어 성능\n\n**Amdahl의 법칙**\n- 멀티코어(멀티프로세서)가 얼마만큼의 최대 성능 향상이 있는지 계산하는데 사용\n- 결론\n\t- 프로그램의 성능을 개선하려면, 가장 많은 시간이 소요되는 곳에 집중해야 함\n\t- 병렬로 처리를 최대화","x":1930,"y":-189,"width":420,"height":314},
		{"id":"e91e91a5a103faf9","type":"text","text":"### 쓰레드의 장점\n\n1. 프로세스 보다 쓰레드 생성, 종료, 교환 시간이 더 짧음\n\t**1. 동일한 메모리 및 파일 공유\n\t2. 커널 개입 없이 통신 가능(ULT)**\n2. 사용자에 대한 응답성 증\n3. 프로세스의 자원과 메모리 공유로 성능 향상\n4. 멀티처리기를 더 효율적으로 사용할 수 있음\n\t1. 다중 프로세서 구조(병렬 실행)","x":847,"y":670,"width":474,"height":283,"color":"1"},
		{"id":"d0689c0b3b86d644","type":"text","text":"### 쓰레드 단위 스케줄링의 장점\n\n- 하나의 기능을 실행하면서 반복적으로 다른 기능들의 상황을 조사할 필요 없음\n- 한 쓰레드가 블록되어도 나머지 쓰레드들 사용 가능\n- 쓰레드들을 각기 다른 처리기에서 실행 가능","x":373,"y":440,"width":474,"height":184},
		{"id":"c0d0f02a48303f2f","type":"file","file":"images/쓰레드.png","x":1860,"y":251,"width":400,"height":276},
		{"id":"2791a89d159f6f68","type":"text","text":"프로세스는 실행중인 프로그램\n\n쓰레드는 실행의 단위, CPU 자원할당의 최소 단위","x":140,"y":-560,"width":250,"height":167},
		{"id":"aad653a1ad9c6a2c","type":"link","url":"https://inpa.tistory.com/entry/%F0%9F%91%A9%E2%80%8D%F0%9F%92%BB-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%E2%9A%94%EF%B8%8F-%EC%93%B0%EB%A0%88%EB%93%9C-%EC%B0%A8%EC%9D%B4","x":-560,"y":-840,"width":400,"height":400}
	],
	"edges":[
		{"id":"618d640ce559900c","fromNode":"c069bd626799e572","fromSide":"bottom","toNode":"202f02e46d6b7648","toSide":"top"},
		{"id":"03cea1f6b7b01750","fromNode":"202f02e46d6b7648","fromSide":"right","toNode":"b208de5316d8d68d","toSide":"left"},
		{"id":"1c418a668b8e0547","fromNode":"202f02e46d6b7648","fromSide":"right","toNode":"6fd26403e5da9414","toSide":"left"},
		{"id":"e21f4bdd5a296800","fromNode":"202f02e46d6b7648","fromSide":"right","toNode":"6cead457b09557bd","toSide":"left"},
		{"id":"ac4be8a2cfd440d8","fromNode":"202f02e46d6b7648","fromSide":"right","toNode":"ced2877806e8e5db","toSide":"left"},
		{"id":"0c577e7faefd5907","fromNode":"b208de5316d8d68d","fromSide":"right","toNode":"a96907c45ccafcce","toSide":"left"},
		{"id":"6cb4d43425b8c344","fromNode":"6fd26403e5da9414","fromSide":"right","toNode":"a96907c45ccafcce","toSide":"left"},
		{"id":"5910305a4af39d50","fromNode":"6cead457b09557bd","fromSide":"right","toNode":"a96907c45ccafcce","toSide":"left"},
		{"id":"120970c8cbda48da","fromNode":"ced2877806e8e5db","fromSide":"right","toNode":"a96907c45ccafcce","toSide":"left"},
		{"id":"6cd50e5bc43b2241","fromNode":"a96907c45ccafcce","fromSide":"bottom","toNode":"f4fc7f7afe220a2e","toSide":"left"},
		{"id":"14e58246de9d8edd","fromNode":"a96907c45ccafcce","fromSide":"bottom","toNode":"b57d6c17d2da5aed","toSide":"left"},
		{"id":"5a80bf0f786ce1c8","fromNode":"b57d6c17d2da5aed","fromSide":"bottom","toNode":"8b2578a285f72c5d","toSide":"top"},
		{"id":"633caaef78edb952","fromNode":"b57d6c17d2da5aed","fromSide":"bottom","toNode":"3e858a34563d51ef","toSide":"top"},
		{"id":"f72bf71cfb4789ab","fromNode":"e91e91a5a103faf9","fromSide":"left","toNode":"d0689c0b3b86d644","toSide":"bottom"},
		{"id":"a0537a0d91fd3717","fromNode":"3e858a34563d51ef","fromSide":"left","toNode":"e91e91a5a103faf9","toSide":"right"},
		{"id":"6b512b9d64ddce8a","fromNode":"3e858a34563d51ef","fromSide":"bottom","toNode":"84fb9dd0339d18e1","toSide":"right"},
		{"id":"c712e40c7683ac38","fromNode":"b510183af1351434","fromSide":"left","toNode":"996ddae1662a75ff","toSide":"right"},
		{"id":"79e7f9ac5f370d88","fromNode":"3e858a34563d51ef","fromSide":"bottom","toNode":"9a1152b2705936a4","toSide":"top"},
		{"id":"433e4a9e28d6e0ac","fromNode":"3e858a34563d51ef","fromSide":"bottom","toNode":"4ebd3f6a4a6509de","toSide":"left"},
		{"id":"0fa3c83ddbd56411","fromNode":"84fb9dd0339d18e1","fromSide":"bottom","toNode":"b510183af1351434","toSide":"top"},
		{"id":"96a1078b556d5a65","fromNode":"4ebd3f6a4a6509de","fromSide":"right","toNode":"7b06668eacf5578a","toSide":"left"},
		{"id":"6c02dfdfddf96146","fromNode":"4ebd3f6a4a6509de","fromSide":"right","toNode":"34ccbfdb675ae9f4","toSide":"left"},
		{"id":"7bfcdfedc148d7ee","fromNode":"7b06668eacf5578a","fromSide":"right","toNode":"2fb68d265a3f3e40","toSide":"left"},
		{"id":"aebadf0d19098031","fromNode":"7b06668eacf5578a","fromSide":"right","toNode":"42b7a908726cb295","toSide":"left"},
		{"id":"fefd4a78894cb856","fromNode":"34ccbfdb675ae9f4","fromSide":"right","toNode":"8548178216408cca","toSide":"left"},
		{"id":"e1ac9e21e4bb90f6","fromNode":"34ccbfdb675ae9f4","fromSide":"right","toNode":"492ad7a7cdfee0d8","toSide":"left"},
		{"id":"d42f5b51881d8fa5","fromNode":"4ebd3f6a4a6509de","fromSide":"right","toNode":"229e91180feb205a","toSide":"left"},
		{"id":"0f936cacc4a9a18d","fromNode":"7b06668eacf5578a","fromSide":"top","toNode":"c7cd21413ac26326","toSide":"bottom"},
		{"id":"0d46462f4a2357b4","fromNode":"c7cd21413ac26326","fromSide":"top","toNode":"9e058fe010ccb494","toSide":"bottom"}
	]
}